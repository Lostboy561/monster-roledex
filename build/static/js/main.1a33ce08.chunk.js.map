{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeHolder","handleChange","type","placeholder","onChange","App","e","setState","searchFeild","target","value","state","fetch","then","respone","json","users","this","filteredMonsters","filter","toLowerCase","includes","toLocaleLowerCase","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uUAGaA,EAAO,SAACC,GAClB,OACC,sBAAKC,UAAU,iBAAf,UACA,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAClB,mCAAML,EAAMI,QAAQE,QACpB,4BAAIN,EAAMI,QAAQG,YCJbC,EAAW,SAACR,GACzB,OACQ,qBAAKC,UAAU,YAAf,SACED,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCLnBM,G,MAAY,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,YAAaC,EAAkB,EAAlBA,aACtC,OACE,uBACAZ,UAAU,SACTa,KAAK,SACLC,YAAaH,EACbI,SAAUH,MCqCAI,E,kDAvCb,aAAc,IAAD,8BACX,gBAeFJ,aAAe,SAACK,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAdrC,EAAKC,MAAQ,CACXd,SAAU,GACVW,YAAa,IALJ,E,qDAUb,WAAoB,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAO,OAAIA,EAAQC,UACxBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACV,SAAUmB,S,oBAO1C,WAAW,IAAD,EAC0BC,KAAKN,MAA/Bd,EADA,EACAA,SAAUW,EADV,EACUA,YACZU,EAAmBrB,EAASsB,QAAO,SAAA3B,GAAO,OAC9CA,EAAQE,KAAK0B,cAAcC,SAASb,EAAYc,wBAGpD,OACE,sBAAKjC,UAAU,MAAf,UACE,mDACD,cAAC,EAAD,CACCW,YAAY,kBACZC,aAAcgB,KAAKhB,eAErB,cAAC,EAAD,CAAUJ,SAAUqB,W,GAlCNK,aCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.1a33ce08.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\n\nexport const Card = (props) => {\n   return (\n    <div className='card-container'>\n    <img alt=\"monster\" src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} />\n        <h2> {props.monster.name}</h2>\n        <p>{props.monster.email}</p>\n    </div>\n   )\n};","import React from 'react';\nimport './card-list.styles.css';\nimport { Card } from '../card/card.component';\n\nexport const CardList = (props) => {\nreturn (\n        <div className='card-list'>\n         {props.monsters.map(monster => (\n             <Card key={monster.id} monster={monster} />\n             ))}      \n        </div>\n)\n};","import React from 'react';\nimport './search-box.styles.css';\n\nexport const SearchBox = ({placeHolder, handleChange}) => {\n  return (\n    <input\n    className=\"search\"\n     type='search'\n     placeholder={placeHolder}\n     onChange={handleChange}\n     />\n  )\n};\n","import './App.css';\nimport React, {Component} from 'react';\nimport { CardList } from './components/card-list/card-list.component.jsx';\nimport {SearchBox}  from './components/search-box/search-box.component.jsx'\n\n\nclass App extends Component {\n  constructor(){\n    super();\n\n    this.state = {\n      monsters: [],\n      searchFeild: ''\n    }\n\n  };\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(respone => respone.json())\n    .then(users => this.setState({monsters: users}));\n  }\n\n  handleChange = (e) => {\n    this.setState({searchFeild: e.target.value})\n  }\n\n  render () {\n    const { monsters, searchFeild } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchFeild.toLocaleLowerCase()\n      ));\n\n  return (\n    <div className=\"App\">\n      <h1> Monsters Rolodex</h1>\n     <SearchBox\n      placeHolder='search monsters'\n      handleChange={this.handleChange}      \n    />\n    <CardList monsters={filteredMonsters} />    \n    </div>\n  );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}